#!/bin/bash

# Copyright (c) 2022-2023, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euxo pipefail

# Vars without defaults
: "${DGXSYSTEM:?DGXSYSTEM not set}"
: "${CONT:?CONT not set}"
: "${DATADIR:?DATADIR not set}"
: "${METADATA_DIR:?METADATA_DIR not set}"
: "${SENTENCEPIECES_DIR:?SENTENCEPIECES_DIR not set}"

# Vars with defaults
: "${NEXP:=1}"
: "${DATESTAMP:=$(date +'%y%m%d%H%M%S%N')}"
: "${CLEAR_CACHES:=1}"
: "${LOGDIR:=$(pwd)/results}"
: "${API_LOG_DIR:=./api_logs}" # apiLog.sh output dir
: "${WALLTIME_DRYRUN:=$WALLTIME}"

# Other vars
LOGBASE="${DATESTAMP}"
readonly _logfile_base="${LOGDIR}/${LOGBASE}"
readonly _cont_name=rnn_speech_recognition.$$
_cont_mounts=(
    "--volume=${DATADIR}:/datasets:ro"
    "--volume=${LOGDIR}:/results"
    "--volume=${METADATA_DIR}:/metadata:ro"
    "--volume=${SENTENCEPIECES_DIR}:/sentencepieces:ro"
)
echo "${_cont_mounts[@]}"

#if [ "${REMOUNT_WORKDIR:-0}" -eq 1 ]; then
#    _cont_mounts="${_cont_mounts},$(pwd):/workspace/rnnt"
#fi

# MLPerf vars
MLPERF_HOST_OS=$(bash <<EOF
    source /etc/os-release
    source /etc/dgx-release || true
    echo "\${PRETTY_NAME} / \${DGX_PRETTY_NAME:-???} \${DGX_OTA_VERSION:-\${DGX_SWBUILD_VERSION:-???}}"
EOF
)
export MLPERF_HOST_OS

# Setup directories
mkdir -p "${LOGDIR}"

# Cleanup container
cleanup_docker() {
    docker container rm -f "${_cont_name}" || true
}
cleanup_docker
trap 'set -eux; cleanup_docker' EXIT

if [ -z "${NV_GPU-}" ]; then
  readonly _docker_gpu_args="--gpus all"
else
  readonly _docker_gpu_args='--gpus="'device=${NV_GPU}'" -e NVIDIA_VISIBLE_DEVICES='"${NV_GPU}"
fi

# Setup container
docker run ${_docker_gpu_args} --pull=always --rm --init --detach \
    --net=host --uts=host --ipc=host --security-opt=seccomp=unconfined \
    --ulimit=stack=67108864 --ulimit=memlock=-1 \
    --name="${_cont_name}" "${_cont_mounts[@]}" \
    "${CONT}" sleep infinity
#make sure container has time to finish initialization
sleep 30
echo about to docker exec
docker exec "${_cont_name}" true
echo done docker exec

readonly TORCH_RUN=( '/opt/conda/bin/torchrun' '--standalone' '--no_python' )
#readonly TORCH_RUN=( 'echo' 'FAKETORCHRUN' '--standalone' '--no_python' )

# Run experiments
for _experiment_index in $(seq -w 1 "${NEXP}"); do
    (
        echo "Beginning trial ${_experiment_index} of ${NEXP}"
	echo ":::DLPAL ${CONT} ${SLURM_JOB_ID} ${SLURM_JOB_NUM_NODES} ${SLURM_JOB_NODELIST}"
	echo "${MLPERF_HOST_OS}"

        # Clear caches
        if [ "${CLEAR_CACHES}" -eq 1 ]; then
            sync && sudo /sbin/sysctl vm.drop_caches=3
            docker exec "${_cont_name}" python -c "
from mlperf import logging
logging.log_event(key=logging.constants.CACHE_CLEAR, value=True)"
        fi

        # Run experiment
	docker exec --env-file <(compgen -e | grep -vE '(PWD)|(PATH)|(^SHLVL)|(^HOME)|(^SHELL)') "${_cont_name}" \
	       "${TORCH_RUN[@]}" --nproc_per_node="${DGXNGPU}" ./a30-run_and_time.sh
    ) |& tee "${_logfile_base}_${_experiment_index}.log"
done
